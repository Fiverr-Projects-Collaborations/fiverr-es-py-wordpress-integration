{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 HelveticaNeue-Bold;\f2\fnil\fcharset0 HelveticaNeue-Italic;
\f3\fnil\fcharset0 HelveticaNeue-BoldItalic;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red0\green0\blue255;}
{\*\expandedcolortbl;;\cssrgb\c1680\c19835\c100000;\cssrgb\c1680\c19835\c100000;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh15000\viewkind0
\deftab560
\pard\pardeftab560\slleading20\partightenfactor0

\f0\fs24 \cf0 \'97 
\f1\b NEW FILES
\f0\b0  \'97\
\uc0\u8232 Now we will have 6 different .csv files:\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	\uc0\u8259 	}
\f2\i \ul Restaurant.csv
\f0\i0 \ulnone  -> same of before\
{\listtext	\uc0\u8259 	}
\f2\i \ul Food.csv 
\f0\i0 \ulnone -> I add a new column called \'91
\f2\i Restaurant ID
\f0\i0 \'92 (I explain below) and deleted \'91
\f2\i Food key
\f0\i0 \'92 column\
{\listtext	\uc0\u8259 	}
\f2\i \ul Restaurant_update.csv
\f0\i0 \ulnone  -> same of Restaurant.csv but with \'91
\f2\i Restaurant ID
\f0\i0 \'92 column instead of \'91
\f2\i Relationship Key
\f0\i0 \'92 column\
{\listtext	\uc0\u8259 	}
\f2\i \ul Food_update.csv
\f0\i0 \ulnone  -> same of Food.csv but with \'91
\f2\i Food ID
\f0\i0 \'92 column instead of \'91
\f2\i Relationship Key
\f0\i0 \'92 column\
{\listtext	\uc0\u8259 	}
\f2\i \ul Restaurant_delete.csv
\f0\i0 \ulnone  -> it is actually only one column with the ID (unique) of the restaurant to delete. It is called \'91
\f2\i Restaurant ID to delete
\f0\i0 \'92\
{\listtext	\uc0\u8259 	}
\f2\i \ul Food_delete.csv
\f0\i0 \ulnone  -> it is actually only one column with the ID (unique) of the food to delete. It is called \'91
\f2\i Food ID to delete
\f0\i0 \'92\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 /\'97\'97\'97\'97\'97\'97\'97\'97/\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f1\b \cf0 \'97NEW SCRIPTS \'97 
\f0\b0 \
\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 I think we should have the following .py script:\uc0\u8232 1) 
\f2\i \ul Insert_restaurant_and_food.py
\f0\i0 \ulnone  -> this is the already present, that should work as I explained in the premises (on Whatsapp)\uc0\u8232 That means that when we run this script, in the Data folder we will have a Restaurant.csv file and a Food.csv file. \
The Food.csv file will have the column \'91
\f2\i Relationship Key
\f0\i0 \'92 populated with the keys present also in Restaurant.csv. So each food to insert is related to a restaurant to insert\uc0\u8232 \u8232 2) 
\f2\i \ul Insert_food.py
\f0\i0 \ulnone  -> this will insert foods in already existing restaurant. To make it works, I inserted a new column in the Food.csv that is \'91
\f2\i Restaurant ID
\f0\i0 \'92.\uc0\u8232 That means that when we run this script, in the Data folder we will have a Food.csv file where we have populated the \'91
\f2\i Restaurant ID
\f0\i0 \'92 column with the ID of the restaurant where we want to insert the food. We will get the IDs from the table you populate when insert new CPT. \
In this case the column \'91
\f2\i Relationship Key
\f0\i0 \'92 will be empty.\
\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f3\i\b \cf0 \ul \ulc0 -- Will we have two different files for food? \
One with the relationship_key : To be inserted with new Restaurant.\
One with the restaurant id : To be inserted in existing restaurant. \
\cf2 \ulnone \'97> 
\f0\i0\b0 We would prefer to have only one file as explained, with the column \'91relationship key\'92 empty in case of insert food in already existing restaurant and viceversa the column \'91Restaurant ID\'92 empty in case of insert food with new restaurant.\
This is in order to minimize mistakes and to keep less files.\
But if it is too hard to implement or it will take you too much time, we could also accept to have 2 files\cf0 \
\uc0\u8232 3) 
\f2\i \ul Update_restaurant.py
\f0\i0 \ulnone  -> this will update the restaurant information\
That means that when we run this script, in the Data folder we will have a Restaurant_update.csv file\uc0\u8232 As I said above, the first column will be \'91
\f2\i Restaurant ID
\f0\i0 \'92 so the ETL will know which restaurant to update. Then, only the column populated will be updated with new value, the empty ones will stay the same\
\

\f3\i\b \ul \'97 Need to check: If single values could be possible to update or not.\
It should not do the changes and make every other columns null. I\'92ll check on my end and let you know on this.\
\pard\pardeftab560\slleading20\partightenfactor0
\cf3 \ulnone \'97> 
\f0\i0\b0 \cf2 Sorry I am not sure if I understand:\
Do you mean that, if only some columns will have value (the values to update) and the other ones will be empty, the script will overwrite also the empty columns and change the value already present in \'91null\'92 (empty)?\
If yes, how could work an \'91update\'92 script?\
Anyway ok, check and let me know
\f3\i\b \cf0 \
\pard\pardeftab560\slleading20\partightenfactor0

\f0\i0\b0 \cf0 \uc0\u8232 4) 
\f2\i \ul Update_food.py 
\f0\i0 \ulnone -> this will update the food information\
That means that when we run this script, in the Data folder we will have a Food_update.csv file\uc0\u8232 As I said above, the first column will be \'91
\f2\i Food ID
\f0\i0 \'92 so the ETL will know which food to update. Then, only the column populated will be updated with new value, the empty ones will stay the same.\uc0\u8232 Please note that if we want to change the restaurant associated to a food, we will populate the column \'91
\f2\i Restaurant ID
\f0\i0 \'92 with the ID of the new restaurant to associate.\
\

\f3\i\b \ul \'97 Food ID with restaurant name/ restaurant id would be more efficient way to achieve this\
\pard\pardeftab560\slleading20\partightenfactor0
\cf3 \ulnone \'97> 
\f0\i0\b0 \cf2 Sorry I am not sure if I understand:\
Do you mean that, instead to have a column with \'91Restaurant ID\'92, it would be better to have 2 columns, one with \'91Restaurant ID\'92 and the second one with \'91Restaurant Name\'92?\uc0\u8232 \cf0 \uc0\u8232 5) 
\f2\i \ul Delete_restaurant.py
\f0\i0 \ulnone  -> this will delete a restaurant + ALL the food associated\uc0\u8232 That means that when we run this script, in the Data folder we will have a Restaurant_delete.csv file.\u8232 As explained, in the file we will have only a column with the IDs of the restaurants to delete, and in this case also ALL the food associated will be deleted\
\
\uc0\u8232 6) 
\f2\i \ul Delete_food.py
\f0\i0 \ulnone  -> this will update a single food\uc0\u8232 That means that when we run this script, in the Data folder we will have a Food_delete.csv file.\u8232 As explained, in the file we will have only a column with the IDs of the foods to delete\u8232 \u8232 \ul POSSIBLE VARIATION:\ulnone \uc0\u8232 Actually point 5) and 6) could be only one script if you prefer, and we could have only one Delete.csv file. \u8232 In this case, the script should just understand if the ID in the file belong to a restaurant (and in this case it will delete the restaurant and all the food associated) or to a food (and in this case it will delete the single food)\u8232 \
\'97 This could be done, as we will be using ids, we can delete both food and restaurant in one file.\
/\'97\'97\'97\'97\'97\'97\'97\'97/\
\
\uc0\u8232 
\f1\b \'97 NEW CHECKS \'97
\f0\b0 \uc0\u8232 \u8232 1) 
\f2\i \ul Insert_restaurant_and_food.py
\f0\i0 \ulnone \uc0\u8232 - CHECK1: it will check if both Restaurant.csv and Food.csv are present in Data folder -> if not, it will throw an error\
\'97 Okay\
\uc0\u8232 - CHECK2: while inserting a restaurant it will:\u8232 	- if \'91
\f2\i restaurant title in that city
\f0\i0 \'92 already exists -> it will throw an error\
	- if \'91
\f2\i restaurant title in that city
\f0\i0 \'92 does not exist -> it will perform check3\
\uc0\u8232 - CHECK3: \u8232 	- if \'91
\f2\i Address
\f0\i0 \'92 already exists -> it will throw an error\uc0\u8232 	- if \'91
\f2\i Address\'92
\f0\i0  does not exist -> it will perform check4\uc0\u8232 - CHECK4:\u8232 	- if \'91
\f2\i Telephone
\f0\i0 \'92 already exists -> it will throw an error\uc0\u8232 	- if \'91
\f2\i Telephone
\f0\i0 \'92 does not exist -> it will create the restaurant\uc0\u8232 - CHECK5: while inserting the food it will:\u8232 	- if \'91
\f2\i Food title
\f0\i0 \'92 in THAT \'91
\f2\i restaurant in that city
\f0\i0 \'92 already exists -> it will throw an error (it will check the restaurant through the \'91
\f2\i Relationship Key
\f0\i0 \'92 column. This happens when we have two rows with same \'91
\f2\i Food title
\f0\i0 \'92 in Food.csv)\uc0\u8232 	- if \'91
\f2\i Food title
\f0\i0 \'92 in THAT \'91
\f2\i restaurant in that city
\f0\i0 \'92 does not exist -> it will create the food in that restaurant\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f3\i\b \cf0 \ul \'97 Implementing this layers of checks would be beneficials but would lead to manual intervention a lot.\
\pard\pardeftab560\slleading20\partightenfactor0
\cf3 \ulnone \'97> 
\f0\i0\b0 \cf2 Sorry I am not sure if I understand:\
Which are the \'91manual intervention\'92 you are talking about? You mean intervention by you in setting the script, or intervention by us when we populate the .csv?\
Can you make an example to make me understand?
\f3\i\b \cf3 \
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 \ul \ulc0 \
\'97 Check5: Is there any possibility to have two food with same title in the same restaurant. \
\pard\pardeftab560\slleading20\partightenfactor0
\cf3 \ulnone \'97> 
\f0\i0\b0 \cf2 Yes, we could have 2 food with same title in same restaurant. They might differ for size (100 gr, 250gr..) and price for example.\
So the check will let me know, thanks to the error thrown, that there is a food with the same title of another one. \
Then I will decide if it is a case like different size (so we want both food) or if it is a mistake.\
If it is a case that we want both food, I will run again the script and in the .csv I will leave only that row and I will flag \'91skip check\'92 column with \'91yes\'92, so it will insert the food even if with same title (because I decided). \
Or maybe I will use the 
\f2\i Insert_food.py
\f0\i0  because at that point the restaurant will be already created, so I cannot use 
\f2\i Insert_restaurant_and_food.py
\f0\i0 \cf0 \
 \
\uc0\u8232 2) 
\f2\i \ul Insert_food.py
\f0\i0 \ulnone  \uc0\u8232 - CHECK1: it will check if Food.csv is present in Data folder -> if not, it will throw an error\u8232 - CHECK2: \u8232 	- if \'91
\f2\i Food title
\f0\i0 \'92 in THAT \'91
\f2\i restaurant in that city
\f0\i0 \'92 already exists -> it will throw an error (it will check the restaurant through the \'91
\f2\i Restaurant ID
\f0\i0 \'92 column. This happens when we try to insert a food in an already existent restaurant which already has that food)\uc0\u8232 	- if \'91
\f2\i Food title
\f0\i0 \'92 in THAT \'91
\f2\i restaurant in that city
\f0\i0 \'92 does not exist -> it will create the food in that restaurant\
\uc0\u8232 3) 
\f2\i \ul Update_restaurant.py
\f0\i0 \ulnone \uc0\u8232 - CHECK1: it will check if Restaurant_update.csv is present in Data folder -> if not, it will throw an error\u8232 - CHECK2: \u8232 	- if \'91
\f2\i Restaurant ID
\f0\i0 \'92 does not exist ->  it will throw an error\uc0\u8232 	- if \'91
\f2\i Restaurant ID
\f0\i0 \'92 exists -> it will update the new values in populated columns\uc0\u8232 \u8232 4) 
\f2\i \ul Update_food.py
\f0\i0 \ulnone \uc0\u8232 - CHECK1: it will check if Food_update.csv is present in Data folder -> if not, it will throw an error\u8232 - CHECK2: \u8232 	- if \'91
\f2\i Food ID
\f0\i0 \'92 does not exist ->  it will throw an error\uc0\u8232 	- if \'91
\f2\i Food ID
\f0\i0 \'92 exists -> it will update the new values in populated columns\uc0\u8232 \u8232 5) 
\f2\i \ul Delete_restaurant.py
\f0\i0 \ulnone \uc0\u8232 - CHECK1: it will check if Restaurant_delete.csv is present in Data folder -> if not it will throw an error\u8232 - CHECK2: \u8232 	- if \'91
\f2\i Restaurant ID to delete
\f0\i0 \'92 does not exist ->  it will throw an error\uc0\u8232 	- if \'91
\f2\i Restaurant ID to delete
\f0\i0 \'92 exists -> it will delete the restaurant with all the food\uc0\u8232 \u8232 6) 
\f2\i \ul Delete_food.py
\f0\i0 \ulnone \uc0\u8232 - CHECK1: it will check if Food_delete.csv is present in Data folder -> if not it will throw an error\u8232 - CHECK2: \u8232 	- if \'91
\f2\i Food ID to delete
\f0\i0 \'92 does not exist ->  it will throw an error\uc0\u8232 	- if \'91
\f2\i Food ID to delete
\f0\i0 \'92 exists -> it will delete the food\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0
\cf0 \
\
/\'97\'97\'97\'97\'97\'97/\
\
\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\b \cf0 NOTE1:
\f0\b0 \
Please it is important that each error will be clear, making us understanding at least which is the problem, about which row and in which file\
\
\

\f1\b NOTE2:
\f0\b0 \
Please note that if we flag the column \'92
\f2\i \ul Skip check
\f0\i0 \ulnone \'92 with \'91
\f2\i Yes\'92
\f0\i0 , it means that when the related script is run, it will skip all the checks (except, of course, the first one where it checks if the .csv exists).\uc0\u8232 This will happen only in few cases, after some error is thrown but we still want to do that operation (like for example the telephone of a restaurant already exist, but we know it is ok because it is the same owner but in another restaurant)\
}