{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww14820\viewh11320\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf0 Searched text = \'91pollo milno\'92\
\
Synonyms = \'91milano, milno, mileno\'92\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 Text1 = pollo milano, grigliato, blabla\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
Text2 = collo, mileno grigliato, blabla\
\
\
Check if the searched terms are present \ul exactly\ulnone  in either synonyms OR in text!\
\
Check if each searched word is present \ul \ulc0 exactly i\ulnone n synonyms:\
If YES -> replace with first one in the row, as discussed before\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 If NO -> Check if present \ul \ulc0 exactly \ulnone in the list of all the words in each text:\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
In our example:\
pollo -> no\
milno -> yes -> replace with \'91milano\'92  (as discussed, also text will have the check in synonyms, so in Text2 \'91mileno\'92 will be replaced by \'91milano\'92 as well)\
\
\
Now for \'91pollo\'92, check in the list of all the words in each text:\
If YES -> ok we can proceed with sorting algorithm\
If NO -> Levenshtein distance check before to proceed with sorting algorithm \
\
For Text 1:\
pollo -> yes -> sorting algorithm between \'91pollo milano\'92 and \'91pollo milano, grigliato, blabla\'92\
\
For Text2:\
pollo -> no -> Levenshtein distance check\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\
Levenshtein distance is:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1 \cf0     str1="pollo";\
    str2=\'93collo\'94;\
    def str1_len = str1.length()\
    def str2_len = str2.length()\
    int[][] distance = new int[str1_len + 1][str2_len + 1]\
    (str1_len + 1).times \{ distance[it][0] = it \}\
    (str2_len + 1).times \{ distance[0][it] = it \}\
    (1..str1_len).each \{ i ->\
       (1..str2_len).each \{ j ->\
          distance[i][j] = [distance[i-1][j]+1, distance[i][j-1]+1, str1[i-1]==str2[j-1]?distance[i-1][j-1]:distance[i-1][j-1]+1].min()\
       \}\
    \}\
    print distance[str1_len][str2_len]/(str1_len+str2_len)\
\
Less is the distance, more similar are the two strings\
\
str1 will be each searched terms not found exactly in synonyms nor in the list of all words in text\
str2 will be each word present in text\
\
We will have to check each str1 with ALL the str2 (nested loop or with your method of lists)\
\
Finally, the check is:\
CASE OF str2_len==3\
if distance[str1_len][str2_len]/(str1_len+str2_len) < X1\
-> replace str1 with str2 and proceed with 
\f0 sorting algorithm 
\f1 \
\
CASE OF str2_len==4\
if distance[str1_len][str2_len]/(str1_len+str2_len) < X2\
-> replace str1 with str2 and proceed with 
\f0 sorting algorithm 
\f1 \
\
\
CASE OF str2_len==5\
if distance[str1_len][str2_len]/(str1_len+str2_len) < X3\
-> replace str1 with str2 and proceed with 
\f0 sorting algorithm 
\f1 \
\
\'85\'85..\
\
CASE OF str2_len==20\
if distance[str1_len][str2_len]/(str1_len+str2_len) < X18\
-> replace str1 with str2 and proceed with 
\f0 sorting algorithm 
\f1 \
\
\
This means that we will choose X1, X2, X3\'85, (that are the values that will determine if two words are similar enough to replace the first with the second) based on the length of the second words (the ones present in text).\
This is because two words of 5 letters, to be considered similar enough, must be very similar (only one error let\'92s say), while two words of 15 letters, to be considered similar enough, could be less similar (maybe 3 error lets say)\
\
We will choose X1, X2, X3\'85.after some tests\
\
In the example above\
Distance between \'91pollo\'92 and \'91collo\'92 will be < X\
-> replace \'91pollo\'92 with \'91collo\'92 -> proceed with 
\f0 sorting algorithm between \'91collo milano\'92 and \'91collo, mileno grigliato, blabla\'92 \
\
\
\
So please note that arr_comb, even if starting from the same searched text, will be different for each text to perform sorting algorithm with.\

\f1 \
}